// <auto-generated />
using System;
using DoctoralManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DoctoralManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251002154519_AddDoctoralProgramEntities")]
    partial class AddDoctoralProgramEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctoralProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("EnglishCertificatePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("HasRequiredPublications")
                        .HasColumnType("boolean");

                    b.Property<bool>("MeetsGradeRequirements")
                        .HasColumnType("boolean");

                    b.Property<string>("MotivationLetter")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int?>("PrefferedMentorId")
                        .HasColumnType("integer");

                    b.Property<string>("ResearchProposal")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctoralProgramId");

                    b.HasIndex("PrefferedMentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.DoctoralProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("integer");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("InternationalTuitionFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ScientificArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SpecialRequirements")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("TuitionFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DoctoralPrograms");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.DoctoralProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EctsCredits")
                        .HasColumnType("integer");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer");

                    b.Property<string>("ResearchArea")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StudentId");

                    b.ToTable("DoctoralProjects");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.ECTSTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IndependentResearchProject")
                        .HasColumnType("integer");

                    b.Property<int>("InternationalMobility")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizedAcademicTraining")
                        .HasColumnType("integer");

                    b.Property<int>("Publications")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeachingActivities")
                        .HasColumnType("integer");

                    b.Property<int>("ThesisDefence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("ECTSTrackings");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("integer");

                    b.Property<string>("ResearchAreas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Mobility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Mobilities");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.ProgramMentor", b =>
                {
                    b.Property<int>("DoctoralProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("MentorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DoctoralProgramId", "MentorId");

                    b.HasIndex("MentorId");

                    b.ToTable("ProgramMentors");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Journal")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctoralProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EnglishCertificate")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("GPA")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("IndexNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCreditsFromBachelor")
                        .HasColumnType("integer");

                    b.Property<int>("TotalCreditsFromMaster")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctoralProgramId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IndexNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Application", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.DoctoralProgram", "DoctoralProgram")
                        .WithMany("Applications")
                        .HasForeignKey("DoctoralProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctoralManagement.Domain.Entities.Mentor", "PrefferedMentor")
                        .WithMany()
                        .HasForeignKey("PrefferedMentorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DoctoralManagement.Domain.Entities.Student", "Student")
                        .WithMany("Applications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctoralProgram");

                    b.Navigation("PrefferedMentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.DoctoralProject", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.Mentor", "Mentor")
                        .WithMany("DoctoralProjects")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DoctoralManagement.Domain.Entities.Student", "Student")
                        .WithMany("DoctoralProjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.ECTSTracking", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.Student", "Student")
                        .WithOne("ECTSTracking")
                        .HasForeignKey("DoctoralManagement.Domain.Entities.ECTSTracking", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Mobility", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.Student", "Student")
                        .WithMany("Mobilities")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.ProgramMentor", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.DoctoralProgram", "DoctoralProgram")
                        .WithMany("ProgramMentors")
                        .HasForeignKey("DoctoralProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctoralManagement.Domain.Entities.Mentor", "Mentor")
                        .WithMany("DoctoralPrograms")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctoralProgram");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Publication", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.Student", "Student")
                        .WithMany("Publications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Student", b =>
                {
                    b.HasOne("DoctoralManagement.Domain.Entities.DoctoralProgram", "DoctoralProgram")
                        .WithMany("Students")
                        .HasForeignKey("DoctoralProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DoctoralProgram");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.DoctoralProgram", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ProgramMentors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Mentor", b =>
                {
                    b.Navigation("DoctoralPrograms");

                    b.Navigation("DoctoralProjects");
                });

            modelBuilder.Entity("DoctoralManagement.Domain.Entities.Student", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("DoctoralProjects");

                    b.Navigation("ECTSTracking");

                    b.Navigation("Mobilities");

                    b.Navigation("Publications");
                });
#pragma warning restore 612, 618
        }
    }
}
